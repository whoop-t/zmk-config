/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
  &mt LALT ESC &kp Q &kp W &kp E &kp R &kp T    &kp Y &kp U &kp I &kp O &kp P &mt RALT ESC
  &kp BSPC &kp A &kp S &kp D &lt 3 F &kp G   &kp H &kp J &kp K &kp L &kp SEMI &kp TAB
  &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M &kp COMMA &kp DOT &kp FSLH &kp RSHFT
      &kp LCTRL &mo 2 &mt LGUI ENTER   &kp SPACE &mo 1 &kp LCTRL
                        >;
                };
                symbols {
                        bindings = <
  &none &kp EXCL &kp AT &kp LBRC &kp RBRC &kp ASTRK   &kp PLUS &kp EQUAL &kp LT &kp GT &kp HASH &none
  &kp BSPC &kp DLLR &kp TILDE &kp LPAR &kp RPAR &none   &none &kp MINUS &kp UNDER &kp AMPS &kp PIPE &kp DEL
  &none &kp CARET &kp PRCNT &kp LBKT &kp RBKT &none   &none &kp DQT &kp SQT &kp GRAVE &kp BSLH &none
      &none &none &kp LG(ENTER)   &kp SPACE &none &none
                        >;
                };
                nums_workspace {
                        bindings = <
  &bt BT_CLR &kp LS(LA(LC(LG(Q)))) &kp LS(LA(LC(LG(W)))) &kp LS(LA(LC(LG(E)))) &kp LS(LA(LC(LG(R)))) &none   &kp EQUAL &kp N7 &kp N8 &kp N9 &kp ASTRK &none
  &kp BSPC &kp LS(LA(LC(LG(A)))) &kp LS(LA(LC(LG(S)))) &kp LS(LA(LC(LG(D)))) &kp LS(LA(LC(LG(F)))) &none   &kp MINUS &kp N4 &kp N5 &kp N6 &kp PLUS &kp DEL
  &none &none &none &kp LS(LA(LC(LG(C)))) &none &none   &kp N0 &kp N1 &kp N2 &kp N3 &none &none
      &none &none &none    &kp SPACE &kp F12 &none
                        >;
                };
                arrow_misc {
                        bindings = <
   &kp LALT &none &none &none &none &none   &kp C_PREV &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT &none &kp RALT
   &none &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0 &none &none   &kp LEFT &kp DOWN &kp UP &kp RIGHT &none &none
   &none &none &none &none &none &none   &kp C_RW &kp C_MUTE &none &kp C_FF &none &none
      &none &none &none   &none &kp C_PP &none 
                        >;
                };
        };
};
